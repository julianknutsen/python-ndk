load("ext://restart_process", "docker_build_with_restart")
load("ext://helm_resource", "helm_resource")
local("kubectl config use-context minikube")

def create_namespace(namespace):
    existsCheck = str(local("kubectl get namespaces"))
    if existsCheck.find(namespace) == -1:
        print("Installing namspace: {}".format(namespace))
        local("kubectl create namespace {}".format(namespace))

def deploy_cert_manager():
    existsCheck = str(local("kubectl get namespaces"))
    if existsCheck.find("cert-manager") == -1:
        print("Installing cert-manager")
        local("kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.11.0/cert-manager.yaml")

    print("Waiting for cert-manager to start")
    local("kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager")
    local("kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager-cainjector")
    local("kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager-webhook")


local("kubectl config use-context minikube")
create_namespace("python-ndk-dev")
create_namespace("traefik")
create_namespace("kafka")
helm_resource("traefik", "overlays/dev/traefik", namespace="traefik")
helm_resource("kafka", "overlays/dev/kafka", namespace="kafka")
deploy_cert_manager()
k8s_yaml(kustomize("overlays/dev"))
k8s_resource(objects=["relay-ingress:ingressroute"], resource_deps=["traefik"], new_name="relay-ingressroute")
k8s_resource(workload="db", resource_deps=["traefik"])
k8s_resource(workload="relay", resource_deps=["traefik", "db", "kafka"])
k8s_resource(workload="event-persister", resource_deps=["traefik", "db", "kafka"])

docker_build_with_restart(
    "event-persister",
    context="../..",
    dockerfile="event-persister.dockerfile",
    ignore=["**/.*", "**/__pycache__", "**/cov.xml", "functional_tests", "spec_tests", "cli"],
    live_update=[
        fall_back_on(["."]),
        sync("../..", "/app/python-ndk"),
    ],
    entrypoint="/opt/venv/bin/python /app/python-ndk/relay/event_persister.py"
)

docker_build_with_restart(
    "python-ndk-relay",
    context="../..",
    dockerfile="relay.dockerfile",
    build_args={
        "RELAY_HOST": "0.0.0.0",
        "RELAY_PORT": "2700",
        "RELAY_LOG_LEVEL": "DEBUG",
        "RELAY_EVENT_REPO": "postgres_kafka"
    },
    ignore=["**/.*", "**/__pycache__", "**/cov.xml", "functional_tests", "spec_tests", "cli"],
    live_update=[
        fall_back_on(["."]),
        sync("../..", "/app/python-ndk"),
    ],
    entrypoint="/opt/venv/bin/python /app/python-ndk/relay/server.py"
)