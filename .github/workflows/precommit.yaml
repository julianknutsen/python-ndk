name: Pre-commit Checks

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  ci:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
      fail-fast: false
    env:
      COVPYTEST: "coverage run -m pytest"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies [dev]
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self update 1.4.0
          poetry install --extras dev

      - name: Formatting / Linting Checks
        run: |
          poetry run lint
    
      - name: Unit Tests
        env:
          COVERAGE_FILE: .coverage.unit.${{ matrix.python-version }}
        run: |
          poetry run ${{ env.COVPYTEST }} ndk

      - name: Install dependencies [test]
        run: |
          poetry install --extras test

      - name: Functional Tests
        env:
          COVERAGE_FILE: .coverage.functional.${{ matrix.python-version }}
        run: |
          poetry run pip install coverage
          poetry run ${{ env.COVPYTEST }} functional_tests relay

      - name: Install dependencies [cli]
        run: |
          poetry install --extras cli

      - name: Sanity Tests
        run: |
          poetry run python scripts/nostrcli_sanity_check.py

      - name: Upload Partial Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.*

      - name: Build python package
        run: |
          poetry build

  server_tests:
    name: Spec tests against server built with NDK
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -e .[test] coverage
          sudo wget -qO /usr/local/bin/websocat https://github.com/vi/websocat/releases/latest/download/websocat.x86_64-unknown-linux-musl
          sudo chmod a+x /usr/local/bin/websocat

      - name: Install Tilt
        run: curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash

      - name: start minikube
        id: minikube
        uses: medyagh/setup-minikube@master

      - name: Start Tilt
        run: |
          tilt up --stream -f relay/deploy/Tiltfile > /tmp/server.log 2>&1 &
          minikube tunnel &

      - name: Wait for Relay to start
        run: |
          while [[ $(kubectl get pods --namespace python-ndk-dev -l app=relay -o jsonpath="{range .items[*]}{@.status.conditions[?(@.type=='Ready')].status}") != "True" ]]; do echo "waiting for pod" && sleep 1; done
          echo "CLUSTER_IP=$(kubectl get svc --namespace python-ndk-dev relay-service -o 'jsonpath={$.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
          echo "CLUSTER_PORT=$(kubectl get svc --namespace python-ndk-dev relay-service -o 'jsonpath={$.spec.ports[0].port}')" >> $GITHUB_ENV

      - name: Wait for websocket to open
        run: |
          while [[ $(websocat ws://${{ env.CLUSTER_IP }}:${{ env.CLUSTER_PORT }}) ]]; do echo "waiting for websocket" && sleep 1; done

      - name: Run Spec Tests
        env:
          COVERAGE_FILE: .coverage.spec
        run: coverage run -m pytest --timeout=5 functional_tests --relay-url=ws://${{ env.CLUSTER_IP }}:${{ env.CLUSTER_PORT }}

      - name: Dump Server Logs
        if: always()
        run: cat /tmp/server.log

      - name: Upload Partial Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.*

  upload_code_coverage:
    name: Upload Code Coverage
    runs-on: ubuntu-latest
    needs: [ci, server_tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download Code Coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage

      - name: List downloaded coverage files
        run: ls -la

      - name: Create codecov report
        run: |
          pip install coverage
          coverage combine
          coverage xml
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  

  publish:
    name: Publish docker image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ci, server_tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DigitalOcean Registry
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
          password: ${{ secrets.DIGITAL_OCEAN_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: relay/deploy/relay.dockerfile
          push: true
          tags: registry.digitalocean.com/python-ndk/python-ndk-relay:latest